动态规划(Dynamic Programming)

1.递归+记忆化 -> 递推
2.状态的定义: opt[n], dp[n], filb[n]
3.状态转移方程: opt[n] = best_fo(opt[n-1], opt[n-2],...)
4.最优子结构

斐波纳挈
int fib(int n) {
    return n <= 1 ? n : fib(n-1) + fib(n-2);
}

int fib(int n, int[] mem) {
    if (n <= 0) {
        return 0;
    } else if (n == 1) {
        return 1;
    } else if (mem[n]) {
        mem[n] = fib(n-1) + fib(n-2);
    }
    return mem[n];
}

递归+记忆化 ==>递推
递推公式:F[n] = F[n-1] + F[n-2]
F[0], F[1]
for (int i = 0; i <= n; ++i) {
    F[i] = F[i-1] + F[i-2];
}
