02.Nginx适用于哪些场景？
--------------------------------
(1)反向代理功能
[1]负载均衡
应用程序开发效率高,运行效率很低,qps,tps或者并发都是受限的,需要把很多应用服务组成集群向用户提供高可用性,需要nginx有反向代理功能,可以把动态请求传到给应用服务
应用程序构成集群,两个需求:1.动态扩容2.容灾,因此反向代理需要具有负载均衡功能

[2]缓存
在链路中,nginx是企业内网的边缘节点,随着我们链路的增长,我们体验的时延会增加.我们可以把用户看起来在
一段时间不变的,缓存在nginx部分.有nginx直接向用户提供访问

(2)静态资源服务
我们在访问css,javascript,js文件,或者一些小图片

(3)API服务,OpenResty
应用程序有很多问题,数据库服务要好的很多,并发性能,tps要原高于应用服务.nginx直接访问数据,如防火墙

03.Nginx出现的历史背景
---------------------------------
(1)互联网的数据量快速增长:互联网的快速普及,全球化,物联网
(2)数据量的快速爆照对硬件性能提出很高要求
摩尔定律在单颗cpu的频率上已经失效了,cpu开始向多核发展
操作系统和软件没有做好服务于多核架构的准备
(3)低效的Apache,一个连接对应一个进程
进程间切换,引发的性能消耗越大

04.为什么用Nginx:它的5个主要优点
---------------------------------
(1)高并发(每个请求占用内存要少),高性能(好的架构设计)
32G64Cpu可以达到数千万的并发连接,静态资源请求可以达到100W的rps
(2)可扩展性,模块化设计,丰富的生态圈
(3)高可靠性,只nginx可以在服务器上不间断的运行数年
(4)热部署,只在不停止服务的情况下,升级nginx
在nginx可能跑着数百万的并发连接,普通服务可以直接kill掉进程,然后重启方法
因为kill掉nginx进程,会导致操作系统为所有的,已建立连接的client发送TCP-RESET复位包,很多客户端无法很
好的处理复位请求
(5)BSD许可证
nginx不只是开源免费的,可以在有定制需求的场景下,去修改nginx的源代码,在运行在我们的商业场景下

05.Nginx的四个主要组成部分
---------------------------------
(1)Nginx二进制可执行文件,有各模块源码编译出的一个文件
框架,官方模块,第三方模块,相当于汽车本身
(2)Nginx.conf配置文件,控制Nginx的行为
相当于驾驶员,虽然二进制文件提出功能,但是这些功能是否开启.或者开启了定义了怎样的行为处理请求
(3)access.log访问日志,记录每一条http请求信息与响应信息
相当于汽车经过地方的GPS轨迹
对web服务做运营,运维分析
(4)error.log错误日志,定位问题

06.Nginx的版本发布历史
---------------------------------
http://nginx.org --->download
http://nginx.org/en/CHANGES
feature新增的功能
bugfix修复的bug
change重构
Mainline version主干版本
Stable version稳定版本

07.选择哪一个Nginx发行版本？
---------------------------------
(1)开源免费的Nginx与商业版Nginx Plus
开源版:nginx.org
商业版:nginx.com
(2)tengine
(3)开源版OpenResty:http://openresty.org
商业版OpenResty:http://openresty.com
nginx非阻塞,事件框架以lua语言,同步开发方式
兼具高性能,开发效率提升特点
api服务器,web防火墙,使用OpenResty

08.编译出适合自己的 Nginx
---------------------------------
(1)auto/cc用于编译,auto/os所有lib库,操作系用判断
auto其余的是辅助configure去判定nginx支持那些模块,当前操作系统有哪些特性,供给nginx使用
(2)CHANGES nginx每一个版本有哪些特性,bugfix
CHANGES.ru俄语
(3)conf示例文件
(4)configure生成中间文件,执行编译前
(5)mv contrib/vim/* ~/.vim/
(6)html
(7)man是nginx的帮助文件
(8)src

编译
------------------
./configure  --help
./configure --prefix=/home/centos/nginx
configure执行完成,中间文件objs
objs/ngx_modules.c决定编译的时候有哪些文件被编译到nginx
make
objs/nginx,nginx版本升级不能执行make install,需要把objs/nginx拷贝到安装目录中
make install首次安装可以使用这个命令

09.Nginx配置文件的通用语法介绍
-------------------------------------
(1)配置语法(ascii文本文件)
[1]配置文件由指令directive与指令directive block块构成
[2]每条指令以;分号结尾,指令与参数间以空格符号分隔
[3]指令块以{}大括号将多条指令组织在一起
[4]include语句允许组合多个配置文件以提升可维护性
[5]使用#符号添加注释,提高可读性
[6]使用$符号使用变量
[7]部分指令的参数支持正则表达式

(2)配置参数:时间单位
ms,s,m,h
d,w,M,y
(3)配置参数:空间单位
什么都不加表示bytes,k/K,m/M,g/G
(4)http配置的指令块
   http大括号里面表示里面所有的指令都是由http模块解析执行
   upstream表示上游服务
   server表示对应一个,或一组域名
   location表示一个url表达式

10.Nginx命令行及演示:重载,热部署,日志切割
-------------------------------------------------
Nginx命令行
格式:nginx -s reload
帮助:-? -h
使用指定的配置文件: -c
指定配置指令: -g
指定运行目录: -p
发送信号: -s 立刻停止服务: stop
             优雅的停止服务: quit
             重载配置文件: reload
             重新开始记录日志文件: reopen
测试配置文件是否有语法错误:-t -T
打印nginx的版本信息,编译信息等:-v -V

重载
./nginx -s reload

热部署:
当需要将正在运行中的 nginx 升级、添加/删除服务器模块时,可以在不中断服务的情况下,使用新版本、重编译的 nginx 可执行程序替换旧版本的可执行程序
[1]
使用新的可执行程序替换旧的可执行程序,对于编译安装的 nginx,可以将新版本编译安装到旧版本的 nginx 
安装路径中。替换之前,最好备份一下旧的可执行文件。 
mv nginx nginx.old
ps -ef | grep nginx
[2]
kill -USR2 [旧版本Nginx主进程pid](新启动一个nginx master进程,使用新的nginx二进制文件.老的worker
也在运行,新的master会生成新的worker,平滑的把所有请求过度到新的二进制文件中起的nginx进程中,实现平滑过渡)
[3]
kill -WINCH [旧版本Nginx主进程pid] 优雅的关闭你所有的worker进程,老的master进程还在,老的master进程
不是自动退出,允许我们进行版本回退

[4]
版本回退
kill -HUP [旧版本Nginx主进程pid]
kill -QUIT [新版本Nginx主进程pid]
kill -TERM [新版本Nginx主进程pid]:强制退出
升级成功退出旧版本
kill -QUIT [旧版本Nginx主进程pid]


日志切割

/nginx -s reopen
rotate.sh

11.用Nginx搭建一个可用的静态资源Web服务器
------------------------------------------------------

(1)
root:会把url中的路径带到文件中
alias后面的路径与url后面的路径是对应的
gzip会压缩
gzip_min_length 1;小于1字节的内容就不再执行压缩了,因为有很多文件内容,在一个TCP报文中就发出去了,如果使用gzip在消耗cpu,意义不大
gzip_comp_level 2;压缩级别
gzip_types test/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jprg image/gif image/png;对某些类型的文件做压缩
Google浏览器调试,F12
NetWork->All,点击Name中内容看见Response Headers:Content-Encoding: gzip
(2)
autoindex on;
http://nginx.org/en/docs/http/ngx_http_autoindex_module.html
dlib-19.17/docs/* 目录文件移动到 nginx/dlib/
访问http://localhost:80/dlib
(3)
公网带宽有限,当有许多并发用户,使用我们的带宽时,会形成争抢关系.为了用户访问大文件的时候,限制他的
速度,以期望能够分离出足够的带宽,给用户访问必要的小文件,如css,jss等小文件
set $limit_rate 1k;限制nginx向client浏览器响应的速度,每秒传输这么多字节到浏览器中
ngx_http_core_module
(4)日志
log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
为什么要命名?对不同域名下做不同格式的日志记录,或者对不同的url,一些大文件,或者反向代理等等不同
用途时,记录不同日志格式
access_log logs/geek.access.log main;
所在的位置决定所属的一类请求,会记录在后面的路径中,采用main的格式

12.用Nginx搭建一个具备缓存功能的反向代理服务
--------------------------------------------------------

[1]由于上游服务要处理非常复杂的业务逻辑,而且强调开发效率,性能不好.使用nginx作为反向代理,可以由一台nginx,把请求按照负载均衡算法代理给多态上游服务器工作,这样就是实现了水平扩展,在用户无感知情况下,
我们添加更多的上游服务器,提升服务器性能.而当上游服务器出现问题的时候,nginx可以自动的把请求,从有
问题处理灾难的服务器,转交给正常的服务器.

11节中nginx静态web资源服务器作为上游服务器,openresty作为代理服务器
listen    127.0.0.1:8080只有本机的进程才可以访问8080端口

upstream local {
    127.0.0.1:8080; #上游服务器
}

proxy_pass http://local;

[2]因为有反向代理,在拿一些变量或一些值,可能会出错.比如一个tcp连接有对端地址,但是如果有了反向代理,
我们的反向代理与客户端是一个tcp连接,而反向代理与上游服务器又是另外一个连接.所以如果去原来远端地址$remote_addr,这时候上游服务器取得是反向代理的地址.如果想拿浏览器的地址,作为我限制浏览器访问速度功能时,通过proxy_set_header,添加一个header发送给上游
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
[3]http://nginx.org/en/docs/http/ngx_http_proxy_module.html
因为nginx作为反向代理时,只有动态的请求,不同的用户访问同一个url看到的内容不同时,才交给上游服务器做
不同处理.但是有些内容一段时间不发生变化.为了减轻nginx上游服务器的压力,把上游服务器的内容缓存一段时间.比如缓存1天,1天之内即使上游服务器对这个响应发生了变化,只有拿缓存的内容发送给浏览器
proxy_cache_path 缓存文件写在哪一个目录下
proxy_cache_path /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m nax_size=10g
                 inactive=60m use_tmp_path=off;

13. 用 GoAccess 实现可视化并实时监控 access 日志
-----------------------------------------------------

可以使用access日志分析定位问题,分析用户的运营数据.
实时分析access比较困难,goaccess可以图形化的方式,通过websocket协议,实时把access log日志的变迁反映到浏览器中,方便分析问题

https://goaccess.io/
goaccess使用:
goaccess access.log -o report.html --log-format=COMBINED
使用-o参数新生成一个html文件,把当前access.log文件以html图表方式展示出来.
当access.log变迁时候,goaccess会新启一个websocket进程,通过一种端口的方式把新的access.log消息,推送到客户端

goaccess安装:
[1]yum install -y goaccess
[2]./configure --enable-utf8 --enable-geoip=legacy

$ wget https://github.com/maxmind/geoip-api-c/releases/download/v1.6.11/GeoIP-1.6.11.tar.gz
$ tar -xzvf GeoIP-1.6.11.tar.gz
$ cd GeoIP-1.6.11
$ ./configure
$ make
$ make install

How to install the ncursesw development libraries
On Debian/Ubuntu, sudo apt-get install libncursesw5-dev
On RedHat/Fedora/CentOS, sudo yum install ncurses-devel

[1]修改nginx服务器的配置文件nginx.conf
location /report.html {
    alias /home/centos/openresty/nginx/html/report.html;
} 
重新加载配置文件：
./sbin/nginx -s reload
[2]
执行goaccess命令,在nginx/logs目录下,执行：
goaccess access.log -o ../html/report.html --real-time-html --time-format='%H:%M:%S'  --date-format='%d/%b/%Y' --log-format=COMBINED
直观看见access.log的变迁,对于分析网站的运营情况,可以看到每个时间点,每一天,每一周,甚至不同国家地区,
使用不同浏览器和操作系统的人,访问我们站点的比例和分布

14.从网络原理来看SSL安全协议
---------------------------------------
SSL协议(Secure Sockets Layer)
TLS协议(Transport Layer Security)
TLS如何保证http的明文消息被加密的?
通过握手,交换密钥,警告,对称加密的应用数据是http层没有感知的情况下,做到数据安全加密
TLS如果做到数据的安全加密?

TL_ECDHE_RSA_WITH_AES_128_GCM_SHA256
ECDHE密钥交换:椭圆曲线加密算法的表达,解决浏览器和server之间怎样各自独立生成密钥,而最后生成的密钥是想用的
密钥交换过程中需要对方验证各自的身份
RSA:身份验证
AES_128_GCM:对数据的加密解密需要对称加密算法,
AES:算法
128:AES算法支持3种加密强度
GCM:AES有很多分组模式,一种分组模式,提高多核cpu情况加密解密性能
SHA256:摘要算法,把不定长度的字符串,生成一个固定长度的更短的摘要

15. 对称加密与非对称加密各自的应用场景
-------------------------------------------
对称加密:性能好
非对称加密:根据数学原理生成一对密钥,特性:同一份文档公钥加密了,只有用私钥才能解密;用私钥加密了,只有用公钥才能解密
非对称加密用途:
1.Alice有一对公钥和私钥,把公钥发布给大家.比如Bob拿到Alice公钥.Bob传递一份原始文档给Alice,Bob拿公钥
对原始文档进行加密,把密文发送给Alice.Alic用他的私钥才能解密.其他人用公钥都没有办法解密
2.Alice用他的私钥进行加密,把密文发给Bob,或者任何人.只要Bob拿到Alice的公钥,公钥是公开的,用公钥
可以解开这段密文,这段密文确实是Alice发出的.为TSL密钥交换算法提供了基本的签名保证.

16. SSL 证书的公信力是如何保证的？
--------------------------------------------


17. SSL 协议握手时 Nginx 的性能瓶颈在哪里？
-----------------------------------------------
TSL通讯过程4个目的:验证对方身份,达成安全套件共识,传递密钥并生成密钥,对数据进行加密通讯

[1]client向server发送hello消息,因为浏览器是多样化,比如:chrome,ie,firefox,而且在不停的变更.
不同浏览器支持的安全套件,加密算法都是不同的.主要是告诉server支持那些加密算法
[2]server有自己支持加密算法的列表,以及自己倾向使用哪一个加密算法套件.nginx选择自己最喜欢的加密算法套件,发送给client
如果我们想复用sesssion,Session Cache,希望再一天内断开连接的client,不用再次协商秘钥
[3]server把自己的公钥证书发送给cliet浏览器,证书中包含证书链.浏览器可以找到根证书库去验证证书是否
有效的
[4]server Hello done,如果之前协商的安全套件,比如椭圆曲线算法,在3~4之前把椭圆曲线的参数发送给client
方便在第6步生成加密的密钥
[5]client根据椭圆曲线的公共参数,生成自己的私钥,在把公钥发给server
这样server有了自己的私钥,把公钥发给client
[6]server根据自己的私钥和client给的公钥共同生成双方加密的密钥
client根据自己的私钥和server给的公钥也可以生成密钥
client和server生成的密钥是相同的

最消耗性能:交换密钥,加密数据
Nginx握手时候看椭圆加密算法和RSA的非对称加密算法这两个性能
对于小文件,握手是影响nginx性能最大的指标
对于大文件,对称加密算法,测吞吐量,相对于其他算法AES性能比较好
对于小文件,Nginx主要考虑非对称加密性能,比如:RSA
对于大文件,Nginx主要考虑对称加密算法性能,比如:AES
小文件较多:优化椭圆曲线算法的密码强度
大文件较多:考虑替换AES算法为更有效算法,或者把密码强度调小一点

18. 用免费 SSL 证书实现一个 HTTPS 站点
------------------------------------------------

$>certbot --nginx --nginx-server-root=/home/centos/openresty/nginx/conf -d geek.taohui.pub
屏幕显示内容
1.No redirect
所有http流量,明文显示的,不安全的流量全不用301或302,这样的重定向协议转到https站点
2.Redirect

include /etc/letsencrypt/options-ssl-nginx.conf文件内容解释:
ssl_session_cache shared:le_nginx_SSL:1m,可以为4khttps连接服务
ssl_session_timeout 1440m:每个http连接握手建立第一次连接后,如果断开再次建立连接,在这个session_timeout时间内,可以复用之前的密钥
ssl_protocols:支持哪些版本的tls协议
ssl_prefer_server_ciphers on:Nginx开始决定使用哪些协议与浏览器通信
ssl_ciphers ":",安全套件之间一个分号分隔,排在前面的优先会被使用

ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;表示使用非对称加密的时候使用怎样的参数,这些参数会决定我们的网络安全的加密强度

19. 基于 OpenResty 用 Lua 语言实现简单服务
-------------------------------------------------
[1]下载OpenResty
http://openresty.org/cn/download.html
[2]分析目录结构
build为编译生成的中间目标文件
bundle/nginx-1.13.6:nginx源代码
bundle/ngx*为nginx的第三方模块,c代码,通常会以ngx开头
bundle/lua*的lua模块,需要使用c模块,比如ngx_lua的功能
configure
