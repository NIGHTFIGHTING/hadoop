02.Nginx适用于哪些场景？
(1)反向代理功能
[1]负载均衡
应用程序开发效率高,运行效率很低,qps,tps或者并发都是受限的,需要把很多应用服务组成集群向用户提供高可用性,需要nginx有反向代理功能,可以把动态请求传到给应用服务
应用程序构成集群,两个需求:1.动态扩容2.容灾,因此反向代理需要具有负载均衡功能

[2]缓存
在链路中,nginx是企业内网的边缘节点,随着我们链路的增长,我们体验的时延会增加.我们可以把用户看起来在一段时间不变的,缓存在nginx部分.有nginx直接向用户提供访问

(2)静态资源服务
我们在访问css,javascript,js文件,或者一些小图片

(3)API服务,OpenResty
应用程序有很多问题,数据库服务要好的很多,并发性能,tps要原高于应用服务.nginx直接访问数据,如防火墙

03.Nginx出现的历史背景
(1)互联网的数据量快速增长:互联网的快速普及,全球化,物联网
(2)数据量的快速爆照对硬件性能提出很高要求
摩尔定律在单颗cpu的频率上已经失效了,cpu开始向多核发展
操作系统和软件没有做好服务于多核架构的准备
(3)低效的Apache,一个连接对应一个进程
进程间切换,引发的性能消耗越大

04.为什么用Nginx:它的5个主要优点
(1)高并发(每个请求占用内存要少),高性能(好的架构设计)
32G64Cpu可以达到数千万的并发连接,静态资源请求可以达到100W的rps
(2)可扩展性,模块化设计,丰富的生态圈
(3)高可靠性,只nginx可以在服务器上不间断的运行数年
(4)热部署,只在不停止服务的情况下,升级nginx
在nginx可能跑着数百万的并发连接,普通服务可以直接kill掉进程,然后重启方法
因为kill掉nginx进程,会导致操作系统为所有的,已建立连接的client发送TCP-RESET复位包,很多客户端无法很好的处理复位请求
(5)BSD许可证
nginx不只是开源免费的,可以在有定制需求的场景下,去修改nginx的源代码,在运行在我们的商业场景下

05.Nginx的四个主要组成部分
(1)Nginx二进制可执行文件,有各模块源码编译出的一个文件
框架,官方模块,第三方模块,相当于汽车本身
(2)Nginx.conf配置文件,控制Nginx的行为
相当于驾驶员,虽然二进制文件提出功能,但是这些功能是否开启.或者开启了定义了怎样的行为处理请求
(3)access.log访问日志,记录每一条http请求信息与响应信息
相当于汽车经过地方的GPS轨迹
对web服务做运营,运维分析
(4)error.log错误日志,定位问题

06.Nginx的版本发布历史
http://nginx.org --->download
http://nginx.org/en/CHANGES
feature新增的功能
bugfix修复的bug
change重构
Mainline version主干版本
Stable version稳定版本

07.选择哪一个Nginx发行版本？
(1)开源免费的Nginx与商业版Nginx Plus
开源版:nginx.org
商业版:nginx.com
(2)tengine
(3)开源版OpenResty:http://openresty.org
商业版OpenResty:http://openresty.com
nginx非阻塞,事件框架以lua语言,同步开发方式
兼具高性能,开发效率提升特点
api服务器,web防火墙,使用OpenResty

08. 编译出适合自己的 Nginx
(1)auto/cc用于编译,auto/os所有lib库,操作系用判断
auto其余的是辅助configure去判定nginx支持那些模块,当前操作系统有哪些特性,供给nginx使用
(2)CHANGES nginx每一个版本有哪些特性,bugfix
CHANGES.ru俄语
(3)conf示例文件
(4)configure生成中间文件,执行编译前
(5)mv contrib/vim/* ~/.vim/
(6)html
(7)man是nginx的帮助文件
(8)src

编译
------------------
./configure  --help
./configure --prefix=/home/centos/nginx
configure执行完成,中间文件objs
objs/ngx_modules.c决定编译的时候有哪些文件被编译到nginx
make
objs/nginx,nginx版本升级不能执行make install,需要把objs/nginx拷贝到安装目录中
make install首次安装可以使用这个命令

09.Nginx配置文件的通用语法介绍
(1)配置语法(ascii文本文件)
[1]配置文件由指令directive与指令directive block块构成
[2]每条指令以;分号结尾,指令与参数间以空格符号分隔
[3]指令块以{}大括号将多条指令组织在一起
[4]include语句允许组合多个配置文件以提升可维护性
[5]使用#符号添加注释,提高可读性
[6]使用$符号使用变量
[7]部分指令的参数支持正则表达式

(2)配置参数:时间单位
ms,s,m,h
d,w,M,y
(3)配置参数:空间单位
什么都不加表示bytes,k/K,m/M,g/G
(4)http配置的指令块
   http大括号里面表示里面所有的指令都是由http模块解析执行
   upstream表示上游服务
   server表示对应一个,或一组域名
   location表示一个url表达式

10.Nginx命令行及演示:重载,热部署,日志切割


重载
./nginx -s reload

热部署:
当需要将正在运行中的 nginx 升级、添加/删除服务器模块时，可以在不中断服务的情况下，使用新版本、重编译的 nginx 可执行程序替换旧版本的可执行程序
[1]
使用新的可执行程序替换旧的可执行程序，对于编译安装的 nginx，可以将新版本编译安装到旧版本的 nginx 安装路径中。替换之前，最好备份一下旧的可执行文件。 
mv nginx nginx.old
ps -ef | grep nginx
[2]
kill -USR2 [旧版本Nginx主进程pid](新启动一个nginx master进程,使用新的nginx二进制文件.老的worker也在运行,新的master会生成新的worker,平滑的把所有请求过度到新的二进制文件中起的nginx进程中,实现平滑过渡)
[3]
kill -WINCH [旧版本Nginx主进程pid] 优雅的关闭你所有的worker进程,老的master进程还在,老的master进程不是自动退出,允许我们进行版本回退

[4]
版本回退
kill -HUP [旧版本Nginx主进程pid]
kill -QUIT [新版本Nginx主进程pid]
kill -TERM [新版本Nginx主进程pid]:强制退出
升级成功退出旧版本
kill -QUIT [旧版本Nginx主进程pid]


日志切割
./nginx -s reopen
rotate.sh
