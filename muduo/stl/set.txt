1.
template <class _Key, class _Compare, class _Alloc>
class set {
public:
    // typedefs:
    typedef _Key     key_type;
    typedef _Key     value_type;
    typedef _Compare key_compare;
    typedef _Compare value_compare;
private:
    typedef _Rb_tree<key_type, value_type, 
            _Identity<value_type>, key_compare, _Alloc> _Rep_type;
    _Rep_type _M_t;  // red-black tree representing set
    // set的所有操作,都转呼叫底层t的操作.set未尝不是个container adapter
public:
    typedef typename _Rep_type::const_iterator iterator; // 如何不让set修改红黑树中的key
};

set<int> iset -> set<int, less<int>, alloc> iset -> template<int, int,identity<int>, less<int>, alloc> class rb_tree;
