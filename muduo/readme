1.STL内存池,nginx内存池
2.http,https协议
验证身份,达成安全套件共识,传递密钥,加密通讯
---------------------------------------------------------
CA 证书的作用，是保证服务器的公钥的来历。其做法是对公钥进行哈希摘要算法，然后用 CA 私钥加密，伴随公钥一起发送出去。
客户端收到后，用 CA 公钥解密，然后对公钥做哈希，比对哈希值是否一致来做到的。
https 通信分为四个步骤：
1) c->s,客户端发起加密通信请求，这个请求通常叫做 ClientHello请求，告知自己支持的协议版本号，加密算法，压缩算法，以及一个用于生成后续通信密钥的随机数；
2) s->c,服务端响应，也叫作 ServerHello，确认加密通信协议，加密算法，以及一个用于生成后续通信密钥的随机数，还有网站证书；
3) c->s,客户端在收到上一步服务端的响应之后，首先会检查证书的颁发者是否可信任，是否过期，域名是否一致，并且从操作系统的证书链中找出该证书的上一级证书，并拿出服务端证书的公钥，然后验证签名和hash，如果验证失败，就会显示警告，我们经常在Chrome里面看到，“此网站有风险，是否继续什么的”。如果验证通过，客户端会向服务端发送一个称作 “pre-master-key” 的随机数，该随机数使用证书的公钥加密，以及编码改变通知（以后咋们就用协商的密钥堆成加密通信了），客户端完成握手。
4) 服务端在收到上一步客户端请求之后，也会确认我以后发给你的信息可就加密了哦，并且完成握手。
此时，客户端有第一步自己生成的随机数，第二步收到服务端的随机数，第三步的 pre-master-key，服务端也是如此，他们就可以用这三个随机数使用约定的算法生成同一个密钥来加密以后的通信数据

3.rpc的实现,protobuf反射,网络框架的接口
[1]基于rpc的encode,decode
len,protobufData,checkSum,
encode
[1]protoBufData通过crc32算法计算checkSum.然后追加到buf
[2]算出buf的长度,包括protobufData,checkSum的长度
decode
[1]sizeof int32_t,找到包体长度len
[2]截取len长度的buf,buf的末尾sizeof int32_t是checkSum,得到checkSum,校验protobufData
[3]然后截取protobufData
(2)基于protobuf传输,需要将message的类型名传递过去,len,typeLen,typeName,protobufData,checkSum
inline google::protobuf::Message* createMessage(const std::string& type_name)                          
{                                                                                                      
    google::protobuf::Message* message = NULL;                                                           
    const google::protobuf::Descriptor* descriptor =                                                     
        google::protobuf::DescriptorPool::generated_pool()->FindMessageTypeByName(type_name);              
    if (descriptor)                                                                                      
    {                                                                                                    
        const google::protobuf::Message* prototype =                                                       
            google::protobuf::MessageFactory::generated_factory()->GetPrototype(descriptor);                 
        if (prototype)                                                                                     
        {                                                                                                  
            message = prototype->New();                                                                      
        }                                                                                                  
    }                                                                                                    
    return message;                                                                                      
} 

4.反射reflection创建protobuf
5.线程池
6.nginx有哪些优点?为什么nginx高性能?nginx热加载实现,nginx的启动流程,父子进程间通讯,nginx的连接池,如何处理过期事件
nginx reload过程，master进程收到reload信号，则重新加载配置文件，同时创建新的worker
进程，然后发送quit信号到原来的worker子进程，源worker子进程就会拒绝bind
接受客户端连接,全部由新的worker进程来接收连接。

(1)向master进程发送HUP信号(reload 命令),master进程中的ngx_reconfigure设置1
(2)master进程校验配置语法是否正确
(3)master进程打开新的监听端口(子进程会继承父进程打开的所有端口)
(4)master进程用新配置启动新的worker子进程,ngx_start_worker_processes(NGX_PROCESS_JUST_RESPAWN)新的子进程,ngx_spawn_process函数中将判断NGX_PROCESS_JUST_RESPAWN,将ngx_processes数组respawn和just_spawn都是1
(5)master进程向老worker子进程发送QUIT信号,ngx_signal_worker_processes,子进程ngx_quit设置为1
如何判断向哪些老worker子进程发送信号呢?ngx_process数据中just_spawn标记不是1的
(6)老worker进程关闭监听句柄(标志新的连接只会到新的worker),设置ngx_exiting为1,处理完当前连接结束进程,定时器超时则退出worker;
ngx_exiting为1，则开始准备关闭worker进程
(1)根据当前ngx_cycle_t中所有正在处理的连接，调用它们对应的关闭连接处理方法
就是将连接中的close标志位置为1，再调用读事件的处理方法
(2)检查ngx_event_timer_rbtree红黑树不为空,调用ngx_process_events_and_timers方法处理事件
如果为空，表示已经处理完所有的事件，这时将调用所有模块的exit_process方法，最后销毁内存池，退出整个worker进程

ngx_reap_children

nginx的accept_mutext锁
nginx定时器
:创建一个最小堆multimap<time, conn>,key是需要下次判断conn中ping的心跳包的时间
(1)三次握手成功,将conn加入到时间堆中.conn中记录这客户端ping过来的时间
AddToTimerQueue
(2)判断是否有过期的连接
[1]时间堆的堆顶,如果小于当前时间,则可能有过期的连接
[2]获得堆顶,并且删除;并计算下一次需要判断的时间,重新加入堆中
[3]将需要判断的这些连接,做cur - conn->last_ping_time > m_iWaitTime*3+10,
   从时间堆中删除这些连接
双buffer的reload方法
7.算法题目,不要直接说出解决办法,对好需求
  这个题目一定有这个数值么?
8.tcp粘包,缺包:1.协议包头2.通过换行分隔(http协议,ftp协议)
9.算法题目:数据处理,内存,时间,hash算法的选取,磁盘空间
  海量数据处理:https://blog.csdn.net/v_july_v/article/category/1106578
10.你为什么离开上一家公司?
11.空间复杂度,时间复杂度
   堆(时间推),优先队列
   二叉排序树,平衡二叉树,红黑树
   字典Trie树
   海量数据处理
12.pipeline模式
13.介绍一下reactor模式


最好的理解方式:举例子,使用生活中的例子,列出1,2,3点

简历:
建议你的重心关注如下几点：
1，参与开发、支持，服务上百万用户系统服务的工作能力
2，具备大规模工程的开发及架构能力
3，是支持大规模，高并发业务服务的能力
4.工作能力，工作态度，工作经历，很重要
5.工作经历可以描述详细的工作内容，但是你需要把这个事情的价值需要讲清楚
6.你在一个完整的，工业级，支撑千万级用户，后台产品线，历练过，这是很多非一线互联网工作，非常看重的点
7.能力很重要，把能力表述出来更重要
8.稳定，连续的工作经历也很关键

项目面试:从整体业务价值向下讲
1.UTF8编码与GB18030编码区别
2.三方技能预测预取处理,
自定义技能协议
技能推荐别的bot的能力
逻辑bot框架
reprompt,空语音reprompt,not match的reprompt
通过HTTP协议发动post请求给技能，DuerOS Bot协议包含对请求与响应Json格式校验，字段权限控制，协议通信数据为UTF8编码。Bot协议能力：提供打开关闭，提供多轮会话指令协议，支持Bot多轮填槽。基于。

多看些能扯的东西,jingkun,caohonwei的介绍DuerOS
看一下jiagunag画的us的整体图
us线上机器核数bj机器56核,qps容量

chat_server
(1)单线程reactor
(2)多线程reactor,需要加锁,
MutexLockGuard guard(&lock);
connection_list.insert(conn)
(3)ThreadLocalSigton<ConnectionList>

TCP网络编程最本质是的处理三个半事件
（1）连接建立：服务器accept（被动）接受连接，客户端connect（主动）发起连接
（2）连接断开：主动断开（close、shutdown），被动断开（read返回0）
（3）消息到达：文件描述符可读
（4）消息发送完毕：这算半个。对于低流量的服务，可不必关心这个事件;这里的发送完毕是指数据写入操作系统缓冲区，将由TCP协议栈负责数据的发送与重传，不代表对方已经接收到数据。

为什么跳槽:
我在百度的工作主要是开发和维护DuerOS技能开放平台和中央控制模块,平台现在业务非常成熟,不需要添加多少新功能,因此我
现在的大部分工作是维护和修改BUG.最近调试能力得到很大的提高,但是长期如此对自己开发和设计能力将不能得到提高,因此
想出来寻找可以设计和开发系统的职位.看到这个岗位是做推荐架构相关,因此我对腾讯的职位为很感兴趣

如果面试遇到不会的问题,不要直接说不会.问一下面试官提示一下思路.与他沟通解决
如果面试挂了:您觉得我的面试存在什么问题
