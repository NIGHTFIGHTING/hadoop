42 冲突的配置指令以谁为准？
---------------------------------------

(1)当一个指令出现在多个配置块中时,值是冲突的以谁为准
(2)没有这条指令,却生效了,怎样的机制?
(3)第三方模块不遵循官方配置规则,如何判断指令生效,或者冲突以谁为准

指令在多个block下可以合并:指令的合并
(1)值指令:存储配置项的值(解析配置时,对这个directive下,存储当时配置的值)
root,access_log,gzip可以合并
(2)动作类指令:指定行为
不可以合并,rewrite,proxy_pass
生效阶段:server_rewrite,rewrite(只有http的rewrite模块可以提供)
         content阶段(反向代理,5个content模块)

存储值的指令继承规则:向上覆盖
(1)子配置不存在时,直接使用父配置块
(2)子配置存在时,直接覆盖父配置块

HTTP模块合并配置的实现?
指令在那个block块下生效?
指令允许出现在那些块下?
在server块内生效,从http向server合并指令:char *(*merge_srv_conf)(ngx_conf_t* cf, void* prev, void* conf);
配置缓存在内存:char *(*merge_loc_conf)(ngx_conf_t* cf,void* prev, void* conf)

static ngx_command_t  ngx_http_referer_commands[] = {

    { ngx_string("valid_referers"),
      NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
      ngx_http_valid_referers,
      NGX_HTTP_LOC_CONF_OFFSET,
      0,
      NULL },

    { ngx_string("referer_hash_max_size"),
      NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_conf_set_num_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_referer_conf_t, referer_hash_max_size),
      NULL },

    { ngx_string("referer_hash_bucket_size"),
      NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
      ngx_conf_set_num_slot,
      NGX_HTTP_LOC_CONF_OFFSET,
      offsetof(ngx_http_referer_conf_t, referer_hash_bucket_size),
      NULL },

      ngx_null_command
};

static ngx_http_module_t  ngx_http_referer_module_ctx = {
ngx_http_referer_add_variables,        /* preconfiguration */
NULL,                                  /* postconfiguration */

NULL,                                  /* create main configuration */
NULL,                                  /* init main configuration */

NULL,                                  /* create server configuration */
NULL,                                  /* merge server configuration */

ngx_http_referer_create_conf,          /* create location configuration */
ngx_http_referer_merge_conf            /* merge location configuration */
};


43 - Listen指令的用法
-------------------------------------
从一个连接建立起,到收到请求


44 - 处理HTTP请求头部的流程
-------------------------------------

http模块处理请求之前,需要http框架都client建立好连接.然后接受http请求发过来的line(方法,url),
接受所有header,根据header信息才能决定使用哪些配置块,让http怎样处理请求

操作系统内核:                                   事件模块                         HTTP模块
client->SYN->server;
client<-SYN+ACK<-server;
client->ACK->server          负载均衡选中CPU上的worker
每个worker进程都监听80/443端口------>
                                       通过epoll_wait返回建立连接的句柄
                                       读事件?调用accept,分配连接内存池
                                       connection_pool_size 512     ------->    

client->DATA->server
client<-ACK<-server

HTTP模块
(1)ngx_http_init_connection设置回调方法                
(2)新建立连接读事件添加到epoll中,epoll_ctl方法
(3)添加超时定时器,表示如果60s没有收到请求超时,client_header_timeout 60s

(1)ngx_http_wait_request_hadler分配内存,ngx的data读取到用户态中,
内存从哪里分?从连接内存池子分
分多大?分配1k
如果url/header超过1k?

处理只把数据收到内存
处理请求需要做上下文分析,分析协议,分析header

接收URI
(1)分配请求内存池(request_pool_size:4k)
为什么分配4k?请求的上下文设计到业务,如果分配很小,需要请求内存池不断扩充
当分配内存次数变多,性能会下降
(2)状态机解析请求行(方法名,url,可能有url很大超过刚才分配的1K)
(3)分配大内存解决url太长,large_client_header_buffets:4 8k
先分配8k,把刚才1k内容拷过来,剩下7k接收http的url
如果8k没有接收完,接收16k,最大32k
(4)状态机解析请求行
(5)标示url.如果完整解析请求行,解析到\r\n,ngx很多变量不是复制一份,而是一个指针指向请求行,

接收header(cookie,host都很长)
(1)状态机解析header
(2)分配大内存,large_client_header_buffers:4 8k
(3)标识header,确定哪一个server块处理请求.
(3)移除超时定时器,client_header_timeout:60s
(4)开始11阶段的http请求处理

45 - Nginx中的正则表达式
-------------------------------------

$>wget https://ftp.pcre.org/pub/pcre/pcre-8.13.tar.gz
$>tar -xzvf  pcre-8.13.tar.gz
$>cd pcre-8.13 && ./configure --enable-utf8 && make
$>./pcretest
示例:\转义符号,取消元字符的特殊含义,()分组与取值
原始url:/admin/website/article/35/change/uploads/party/5.jpg
转换后的url:/static/uploads/party/5.jpg
匹配原始url的正则表达式:
/^\/admin\/website\/article\/(\d+)\/change\/uploads\/(\w+)\/(\w+)\.(png|jpg|gif|jpeg|bmp)$/

rewrite ^/admin/website/article/(d+)/change/uploads/(w+)/(w+).(png|jpg|gif|jpeg|bmp)$
 /static/uploads/$2/$3.$4 last;

location,server_name,rewrite指令如虎添翼


46 - 如何找到处理请求的server指令块
--------------------------------------------------

在处理11个http模块请求前,现决定哪一个server块被使用

主域名作用:server_name后面有多个域名,第一个是主域名,server_name_in_redict off时候主域名不生效

servername_test.conf
server {
    server_name primary.taohui.tech second.taohui.tech
    server_name_in_redirect off;

    return 302 /redict;
}

$>curl second.taohui.tech -I (server_name_in_redict off)
$>显示Location: http://second.taohui.tech/redict
$>curl second.taohui.tech -I (server_name_in_redict on)
$>显示Location: http://primary.taohui.tech/redict

server_name指令:
(1)指令后可以跟多个域名,第一个是主域名
Context http,server,location
(2)*泛域名:仅支持在最前或者最后 server_name *.tarhui.tech
(3)正则表达式:加~前缀 server_name www.taohui.tech ~^www\d+\.taohui\.tech;
(4)用正则表达式创建变量:用小括号()
(5).taohui.tech可以匹配taohui.tech *.taohui.tech
   _匹配所有
   "" 匹配没有传递Host头部
server {
    server_name ~^(www\.)?(.+)$;
    location / { root /sites/$2; }
}

server {
    server_name ~^(www\.)?(?<domain>.+)$;
    location / { rppt/sites/$domain; }
}

server匹配顺序
(1)精确匹配
(2)*在前的泛域名
(3)*在后的泛域名
(4)按文件中的顺序匹配正则表达式域名
(5)default server
    没有明确指定,第1个server块
    listen指定default

当ngx框架取到http的host头部时,可以用这个值与server块下server_name进行匹配.
按照相应顺序匹配一个server块时,这个server块下的所有http模块的指令就可以使用了


47 - 详解HTTP请求的11个阶段
----------------------------------------

当ngx接收完用户请求的header时候,按照11个阶段的顺序,一次调用每个阶段中的http模块.
当然每个阶段可能有多个http模块,他们之前的顺序也很重要

48 - 11个阶段的顺序处理
------------------------------------------
http请求进入这11个阶段,每个阶段可能有0个或者多个http模块.如果某个模块不在把请求向下传递,
后面的模块得不到执行
同一个阶段的多个模块,不一定都有机会执行到,可能会有前一个模块把请求传个下一个阶段中模块处理

(1)ngx_modules.c中char *ngx_module_names[]数组顺序,看出同一个阶段每个模块执行顺序相反
(2)rewrite,find_config,rewrite是ngx框架执行,第三方模块没有机会执行
如果access直接会跳到try_files模块阶段
index执行直接跳到,log模块阶段


49 - postread阶段：获取真实客户端地址的realip模块
-----------------------------------------------------

为后续模块实现限速,限流
(1)TCP连接四元组(src ip,src,port, dst ip,dst port)
(2)HTTP头部X-Forward-For用于传递IP
(3)HTTP头部X-Real-IP用于传递用户IP
(4)网络中存在许多反向代理

用户(路由器分配一个内网IP:192.168.0.x)
ADSL(运营商分配公网IP:115.204.33.1)
CDN(网站CDN,没有缓存我要的资源,然后回原,IP地址:1.1.1.1) []
某反向代理(IP地址2.2.2.2) [X-Forwarded-For:115.204.33.1 X-Real-IP:115.204.33.1]
Nginx remote_addr变量:2.2.2.2,用户地址:115.204.33.1[X-Forwarded-For:115.204.33.1 1.1.1.1 X-Real-IP:115.204.33.1]

拿到真实用户IP后如何使用?基于变量!!!
如binary_remote_addr,remote_addr这样的变量
(原来直接与ngx产生client连接的地址,但是经过realip模块改为X-Forwarded-For里面地址)
其值就为真实的IP!这样做连接限制(limit_conn模块)才有意义!
这也是为什limit_conn模块在preaccess阶段,而不在postread阶段


默认不会编译进Nginx
  --with-http_realip_module  enable ngx_http_realip_module
变量:realip_remote_addr,realip_remote_port
realip模块的指令:
(1)set_real_ip_from:只有是从CDN,或者是内网过来的IP地址,认为是可信的,所以
从他们的X-Forwarded-For取真正IP.
对于什么样的tcp连接的source ip,才能做替换remote_addr变量
(2)real_ip_header field | X-Real-IP | X-Forwarded-For |proxy_protocol
表示real ip从哪里面取出
(3)real_ip_recursive on | off;
环回地址
Default real_ip_recursive off;
如果打开,会把X-Forwarded-For最后的地址,和client地址相同,把它pass,取上一个地址
$>curl -H "X-Forwarded-For: 1.1.1.1,192.168.244.143 X-Real-IP: 1.0.0.0" 192.168.244.143
$>Client real ip: 192.168.244.143

real_ip_recursive on;设置
$>curl -H "X-Forwarded-For: 1.1.1.1,192.168.244.143 X-Real-IP: 1.0.0.0" 192.168.244.143
$>Client real ip: 192.168.244.143

因为处于postread阶段可以得到未经过处理的X-Forwarded-For/X-Real-IP里面的用户地址

50 - rewrite阶段的rewrite模块：return指令
-----------------------------------------------
http rewrite模块生成的return指令

Syntax:return code [text]    // text部分作为body
       return code URL    // URL作为重定向
       return URL

Default: --
Context： server,location,if
返回状态码:
HTTP 1.0标准
444:ngx立刻关闭连接,不会向用户返回内容
301:http1.0永久重定向
302:临时重定向,禁止被缓存
返回302浏览器不会对这次行为重定向.本来访问a,ngx给了一个b,不会做重定向.
下次访问a,再给重定向b,再去访问b结果
HTTP1.1标准
303:临时重定向,允许改变方法,禁止被缓存
307:临时定向,不允许改变方法,禁止被缓存
308:永久重定向,不允许改变方法

rewrite:return指令与error_page
Syntax:error_page code ...[=[response]]uri;
Default:-
C ontext:http,server,location,if inlocation

server与location块下的return指令关系?
执行server块下的return指令

return与error_page指令的关系?
执行server块下的return指令返回


51 - rewrite阶段的rewrite模块：重写URL
-----------------------------------------------------

Syntax: rewrite regex replacement[flag]
Default: -
Context: server,location,if
(1)将regex指令的url替换成replacement这个新的url
    --可以使用正则表达式及变量提取
(2)当replacement以http://或者https://或者$schema开头,则直接返回302重定向
(3)替换后的url根据flag指定的方式进行处理
   [1]last:用replacement这个URI进行新的loaction匹配
   [2]break:break指令停止当前脚本指令的执行,等价于独立的break指令
   [3]redirect:返回302重定向
   [4]permanent:返回301重定向


curl localhost:8082/first/3.txt
curl localhost:8082/second/3.txt
curl localhost:8082/third/3.txt

http://192.168.244.131:8082/redirect1/index.html
http://192.168.244.131:8082/redirect2/index.html
http://192.168.244.131:8082/redirect3/index.html
http://192.168.244.131:8082/redirect4/index.html

rewrite行为记入error日志
------------------------------------------------------
Syntax: rewrite_log on | off;
Default: rewrite_log off;
Context: http,server,location,if


52 - rewrite阶段的rewrite模块：条件判断
----------------------------------------------------
Syntax: if(condition) {...}
Default: --
Context: server,location
规则:条件condition为真,则执行大括号内的指令;遵循值指令的继承规则

53 - find_config阶段：找到处理请求的location指令块
----------------------------------------------------

(1)当server下的rewrite指令执行完成,根据请求的url根据location后面相对应的url前缀,或者正则表达式
进行匹配,匹配完成可以确定哪一个location,对这个请求处理

(2)
Syntax:    location [ = | ~ | ~* | ^~ ] uri { ... }
location @name { ... }
Default:    —
Context:    server, location

Syntax:    merge_slashes on | off;
Default:    
merge_slashes on;
Context:    http, server
把两个\\合并为一个\,base64编码的时候可以禁用

(3)location匹配规则
前缀字符串
[1]常规
[2]=:精确
[3]^~与这条url前缀匹配上后,不在进行正则表达式匹配
正则表达式

(4)ngx内部有一颗二叉树,存储所有前缀字符串
[1]匹配上=字符串,使用匹配上的=精确匹配location
[2]匹配^~字符串,使用匹配上的^~字符串location
[3]记住最长匹配的前缀字符串location
   按照nginx.conf中的顺序依次匹配正则表达式location
   匹配上->使用匹配上的正则表达式
   所有正则都不匹配->使用最长匹配的前缀字符串loction

$>curl 127.0.0.1:8083/Test1
 = /Test1 exact match!
$>curl 127.0.0.1:8083/Test1/
 ^~ /Test1/ stop regular expressions match!
$>curl 127.0.0.1:8083/Test1/Test
 ^~ /Test1/ stop regular expressions match!
$>curl 127.0.0.1:8083/Test1/Test2
 ~* /Test1/(\w+) longest regular expressions match!
 因为配置中location /Test1/Test2 前面没有禁止正则匹配^~
$>curl 127.0.0.1:8083/Test1/Test2/
 /Test1/Test2 longest prefix string match! 
$>curl 127.0.0.1:8083/test1/Test2/
 ~* /Test1/(\w+) longest regular expressions match!

1.location匹配规则
2.当location数量很多,怎样通过禁止正则表达式匹配/等于号等等,对于非常频繁发起的请求减少做location匹配次数


54 - find_config阶段：找到处理请求的location指令块
----------------------------------------------------------

55 - preaccess阶段：对连接做限制的limit_conn模块
------------------------------------------------------

如何限制每个客户端的并发连接数?
ngx_http_limit_conn_module模块
生效阶段:NGX_HTTP_PREACCESS_PHASE阶段
模块:http_limit_conn_module
默认编译近nginx,通过--without-http_limit_conn_module禁用
生效范围:全部worker进程(基于共享内存)
         进入preaccess阶段前不生效
         限制的有效性取决于key的设计:依赖postread阶段的realip模块取得真实ip

Syntax:    limit_conn_zone key zone=name:size;
Default:    —
Context:    http

这个key的并发连接数量
Syntax:    limit_conn zone number;
Default:    —
Context:    http, server, location


当ngx作为资源服务器为用户提供服务时,限制用户同时发起的并发连接数常用功能.limit_conn提供这个功能
设计好它的key是它的关键


56 - preaccess阶段：对请求做限制的limit_req模块
-------------------------------------------------------
如何限制每个客户端的并发连接数?
ngx_http_limit_conn_module模块
生效阶段:NGX_HTTP_PREACCESS_PHASE阶段
模块:http_limit_conn_module
默认编译近nginx,通过--without-http_limit_conn_module禁用
生效范围:全部worker进程(基于共享内存)
         进入preaccess阶段前不生效
         限制的有效性取决于key的设计:依赖postread阶段的realip模块取得真实ip


Syntax:    limit_req_zone key zone=name:size rate=rate [sync];
Default:    —
Context:    http

Syntax:    limit_req zone=name [burst=number] [nodelay | delay=number];
Default:    —
Context:    http, server, location
nodelay表示,burst里面的请求也会返回error

limit_req已经向用户拒绝了,limit_conn没有机会执行

57 - access阶段：对ip做限制的access模块
-----------------------------------------------------------------------

access控制请求是否可以继续向下访问
问题:如何限制某些IP地方的访问?
ngx_http_access_module模块
生效阶段:NGX_HTTP_ACCESS_PHASE
模块:http_access_module
默认编译进ngx,通过--without-http_access_module禁用
生效范围:进入access阶段前不生效
虽然deny address,对某些ip做限制,limit_req,limit_conn还是不会生效

Syntax:    allow address | CIDR | unix: | all;
Default:    —
Context:    http, server, location, limit_except

Syntax:    deny address | CIDR | unix: | all;
Default:    —
Context:    http, server, location, limit_except

顺序执行的,当满足一条后,不需要向后执行
access控制用户访问的方法,对于内网中,我们相应的企业服务访问ngx

58 - access阶段：对用户名密码做限制的auth_basic模块
---------------------------------------------------------------------

RFC2617:HTTP Basic Authentication
校验用户名密码是否匹配,来决定是否拒绝请求访问
client->ngx
client<--ngx:WWW-Authenticate
浏览器会弹出用户名密码
浏览器会以明文的方式发送给ngx,使用https可以保证安全性

生成工具htpasswd
httpd-tools,htpasswd -c file -b user pass
htpasswd -bc file user pass
文件格式:comment
name1:password1
name2:password2:comment
name2:password3

提供一些非常简单的界面,比如goaccess,对他做一些安全保护使用auth_basic非常快捷的方法


59 - access阶段：使用第三方做权限控制的auth_request模块
--------------------------------------------------------------
在生产环境中可能会有一个动态web服务器,或者应用服务器,他们提供更复杂,用户名密码权限验证,
通过ngx访问资源时,先把请求传递给应用服务器,根据应用服务器返回的结果,在判断这个请求资源,
能不能继续执行
功能:向上游的服务转发请求,若上游服务器的响应码是2xx,则继续执行,若上游服务器返回的是401或者403
,则将响应返回给客户端
原理:收到请求后,生成子请求,通过反向代理技术把请求传递给上游服务,根据上游的服务,确定是否处理当前
请求
默认为编译进Nginx,--with-http_auth_request_module


60 - access阶段的satisfy指令
------------------------------------------
限制所有access阶段模块的satisfy指令
access阶段的模块:
access模块
auth_basic模块
auth_request模块
其他模块

(1)如果有return指令,access阶段会生效么?
access肯定不会生效,因为return在rewrite阶段
(2)多个access模块的顺序有影响么?
&ngx_http_auth_requset_module,
&ngx_http_auth_basic_module,
&ngx_http_access_module
有影响
(3)输对密码,下面可以访问到文件吗?
location / {
    satisfy any;
    auth_basic "test auth_basic";
    auth_basic_user_file examples/auth.pass;
    deny all;
}
可以访问到文件

(4)如果把deny all提到auth_basic之前呢?
&ngx_http_auth_requset_module,
&ngx_http_auth_basic_module,
&ngx_http_access_module
在这里配置指令的顺序无关紧要,模块间的顺序决定的

(5)如果改为allow all,有机会输入密码吗?
location / {
    satisfy any;
    auth_basic "test auth_basic";
    auth_basic_user_file examples/auth.pass;
    allow all;
}

satisfy any表示任意一个模块同意就可以了,allow all是access模块的,先于auth_basic模块执行
allow all已经同意了,没有机会去输入用户名密码了

statisfy指令对于控制acess模块行为,控制请求访问权限

61.precontent阶段：按序访问资源的try_files模块
-------------------------------------------------------

Syntax: try_files file ... uri;
        try_files file ... =code;
Default:-
Context:server, location
模块:ngx_http_try_files_module模块
功能:依次试图访问多个url对应的文件(由root或者alias指令指定),当文件存在是直接返回文件内容,
     如果所有文件不存在,则按照最后一个URL结果或者code返回


61_tryfiles.conf
word press站点可以使用到tryfiles指令,对于反向代理很有用.可以先尝试从磁盘获取文件内容,
如果没有在反向代理到上游服务


62.实时拷贝流量：precontent阶段的mirror模块
----------------------------------------------------------
生产活动中,可能需要同步的copy一份到测试环境,开发环境做处理

模块:ngx_http_mirror_module模块,默认编译进Nginx,通过--without-http_mirror_module移除模块

处理请求时,生成子请求访问其他服务,对子请求的返回值不作处理

Syntax:    mirror uri | off;
Default:    mirror off;
Context:    http, server, location

Syntax:    mirror_request_body on | off;
Default:    mirror_request_body on;
Context:    http, server, location 

62_mirror.conf

对于多个环境中,需要处理用户流量,非常有帮助

63.content阶段：详解root和alias指令
-------------------------------------------

Syntax: alias path;
Default: -
Context: location

Syntax: root path;
Default: root html;
Context: http,server,location,if in location

功能:将url映射为文件路径,已返回静态文件内容
差别:root会将完整url映射进文件路径中
alias只会将location后的URL映射到文件路径

63_static.conf

64.static模块提供的3个变量
--------------------------------------------------
访问/Realpath/1.txt时,这三个变量的值各位多少?
location  /RealPath/ {
    alias html/realpath/;
            return 200 '$request_filename:$document_root:$realpath_root\n';
}

ln -sfn src target
ln -sfn first realpath

request_filename:待访问文件的完整路径
document_root:由URI和root/alias规则生成的文件夹路径
realpath_root:将document_root中的软连接等换成真实路径
$>curl localhost:8088/RealPath/1.txt
$>/home/centos/nginx2/html/realpath/1.txt:/home/centos/nginx2/html/realpath/:/home/centos/nginx2/html/first

types指令读磁盘文件,根据文件扩展名做映射
types指令需要加速,需要把扩展名做映射,放到hash表中
default_type,使用return,本身没有文件名使用type来告诉用户content_type应该填写

问找到文件时的错误日志
Syntax: log_not_found on | off;
Default: log_obt_found on;
Context: http,server,location

65.static模块对url不以斜杠结尾却访问目录的做法
-------------------------------------------------------

访问目录是URL最后没有带/?
static模块实现了root/alias功能时,发现访问目标是目录,但URL末尾未加时,会返回301重定向
ngx提供3种指令控制这样的行为
location会把原先的url加上一个/

Default:填上域名http://
Syntax: absolute_redirect on | off;
Default: absolute_redirect on;
Context: http,server,location

填上哪一个域名
Syntax:server_name_in_redirect on | off;
Default: server_name_in_redirect_off;
Context: http,server,location
返回请求中的域名?请求中Host头部指向的域名?server_name中配置的primary的主域名

Syntax: port_in_redirect on | off;
Default: prot_in_redirect on;
Context: http,server,location

absolute_redirect off;
$>curl localhost:8089/first -I
$>Location: /first/

absolute_redirect on;
$>curl localhost:8089/first -I
$>Location: http://localhost:8089/first/

absolute_redirect on;
$>curl -H "Host: aaa" localhost:8089/first -I
$>Location: http://aaa:8089/first/

server_name_in_redirect on;
$>curl -H "Host: aaa" localhost:8089/first -I
$>Location: http://return.taohui.tech:8089/first/

65_dirredirect.conf

66.index和autoindex模块的用法
-------------------------------------------

(1)对访问/时的处理:content阶段的index模块
功能:指定/访问时返回index文件内容
ngx_http_index_module
模块:
Syntax: index file ...;
Default: index index.html;
Context: http,server,location

index领先auto_index
(2)显示目录内容:content阶段的autoindex模块
功能:当URL以/结尾值,尝试一html/xml/json/jsonp等格式返回root/alias中指向目录的目录结构
模块:ngx_http_index_module
默认编译进Nginx:
--without-http_autoindex_module取消

Syntax: autoindex_exact_size on |off;
Default: autoindex_exact_size on;
Context: http,server,location
autoindex_format为html时有效,表示显示相对的路径,还是绝对的路径.绝对的路径以字节来显示
相对路径后面有单位k,m,g

Syntax:    autoindex_format html | xml | json | jsonp;
Default:    autoindex_format html;
Context:    http, server, location

Syntax:    autoindex_localtime on | off;
Default:    
autoindex_localtime off;
Context:    http, server, location
时间是否用本地时间格式

67.提升多个小文件性能的concat模块
-------------------------------------------------

在一次请求中返回多个文件内容,对于在web页面中访问多个小文件来提升性能,是很有帮助的

ngx_http_concat_module
https://github.com/alibaba/nginx-http-concat

concat: on|off
default: concat off
Context:http,server,location

concat_delimiter: string
Default:None
Context:http, server,location
如果返回多个文件内容,前端如何知道多个文件内容呢?分隔符


concat_types: MIME types
Default: concat_types:text/css application/x-javascript
Context:http,server, location
对哪些文件类型做合并

concat_unique:on | off
Default: concat_unique on
Context: http,server,location
是否对一种文件类型,还是多种文件类型做合并

concat_ignore_file_error: on |off
Default:off
Context:http,server,location
有些文件出现错误,可以忽略继续返回其他文件内容

concat_max_files:numberp
Default:concat_max_files 10
Context:http,server,location
最多可以合并多少文件

./configure --with-http_realip_module --prefix=/home/centos/nginx2 --with-http_auth_request_module --add-module=../nginx-http-concat
目录结果
html
    -concat
        -1.txt
        -2.txt
$>curl localhost:8092/concat/??1.txt,2.txt
$>1.txt
  :::2.txt

通过concat模块可以有效提高网络效率,从而提升性能

68.access日志的详细用法
-------------------------------------------

log阶段:记录请求访问日志的log模块
功能:将HTTP请求相关信息记录到日志
模块:ngx_http_log_module无法禁用

(1)http://nginx.org/en/docs/http/ngx_http_log_module.html
Syntax:    log_format name [escape=default|json|none] string ...;
Default:    log_format combined "...";
Context:    http

(2)默认的combined日志格式
log_format combined '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

remote_addr:远端地址 remote_user:auth_basic远端用户填写的用户名
time_loca:时间 request:请求 status:返回状态
body_bytes_sent:body字节数 http_referer:从哪个网站引入的 http_user_agent:浏览器类型

(3)Syntax:    access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
access_log off;
Default:    access_log logs/access.log combined;
Context:    http, server, location, if in location, limit_except

[1]path路径可以包含变量:不打开cache是没记录一条日志都需要,打开关闭日志文件
      比如:host变量:根据每个请求的host头部值,写入不同文件.如果在path中包含变量,可能每一个请求
      变量是不同的,不同的请求记录在不同文件中
[2]if通过变量值控制请求日志是否记录
[3]日志缓存:
    功能:批量将内存中的日志写入磁盘(日志并不大,但是引发一个IO调用,磁头旋转,几十毫秒)
    写入磁盘的条件:
        所有待写入磁盘的日志大小超出缓存大小(批量积累一批日志,在向磁盘写入)
        达到flush指定的过期时间(如果没有flush,会在内存中积累很多日志,进程挡掉,这些日志会丢失)
        worker进程执行reopen命令,或者正在关闭
[4]日志压缩
    功能:批量压缩内存中的日志,在写入磁盘
    buffer大小默认为64KB
    压缩级别默认为1(1最快压缩率最低,9最慢压缩率最高)

(4)对日志文件名包含变量时的优化
Syntax:    open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];
open_log_file_cache off;
Default:    open_log_file_cache off;
Context:    http, server, location
经常被使用含有变量的文件,不会被经常的打开关闭
max:缓存内最大文件句柄数,超出后用LRU算法淘汰
inactive:文件访问完后在这段时间内不会被关闭,默认10秒
min_uses:在inactive时间内使用次数超过min_uses才会继续存在内存中.默认1
valid:超出valid时间后,将对缓存的日志文件检查是否存在.默认60秒
off:关闭缓存功能

69.HTTP过滤模块的调用流程
----------------------------------------------------------

在content阶段会生成给用户的响应内容.过滤在log模块之前,content模块之后,介入请求处理
首先对header进行过滤,在对body过滤

ngx_http_copy_filter_module:
copy_filter:复制包体内容.如果用send_file指令,零拷贝技术,文件内容不经过用户态内存,
             不经过ngx,直接发给用户.gzip一定要在copy_filter之后,gzip需要对内存中的内容做压缩.
             打开gzip,copy_filter会让send_file失效,会把文件内容先拷贝一份到内存中,交给后续模块处理
ngx_http_postpone_filter_module:处理子请求
ngx_http_header_filter_module:构造响应头部
ngx_http_write_filter_module:发送响应,最终调用操作系统write/send系统调用,把内存内容发给client


70.用过滤模块更改响应中的字符串：sub模块
----------------------------------------------------------------

功能:把响应中指定的字符串,替换为新的字符串
模块:ngx_http_sub_filter_module模块
默认未编译进Nginx,通过--with-http_sub_module启用

Syntax:    sub_filter string replacement;
Default:    —
Context:    http, server, location

Syntax:    sub_filter_last_modified on | off;
Default:    
sub_filter_last_modified off;
Context:    http, server, location
是否显示未修改之前的last_modified

Syntax:    sub_filter_last_modified on | off;
Default:    
sub_filter_last_modified off;
Context:    http, server, location
是否值只替换1次

Syntax:    sub_filter_types mime-type ...;
Default:    
sub_filter_types text/html;
Context:    http, server, location
针对什么样的响应替换

70_sub.conf

71.用过滤模块在http响应的前后添加内容：addition模块
------------------------------------------------------------------
Syntax:    add_before_body uri;
Default:    —
Context:    http, server, location

Syntax:    add_after_body uri;
Default:    —
Context:    http, server, location

Syntax:    addition_types mime-type ...;
Default:    addition_types text/html;
Context:    http, server, location

功能:在响应前或者响应后增加内容,而增加内容的方式是通过新URL响应完成
模块:ngx_http_addition_filter_module模块,默认未编译进Nginx,通过--with-http_addition_module

72.Nginx变量的运行原理
------------------------------------------------------

(1)在nginx.conf通过变量,可以修改各个模块处理请求的方式
(2)在openresty的lua语言中

变量的提供模块与使用模块
提供变量模块:
Nginx启动发现这是一个http模块,有一个回调方法preconfiguration,告诉这个模块读取配置文件了.
pre表示在读取nginx.conf之前定义新的变量,比如ngx_http_referer_variable提供invalid_referer这个变量
解析出变量的方法(输入就是请求的header),变量名(输出是变量名的值)

使用变量模块:比如http的access日志
解析nginx.conf时定义变量使用方式
变量值:处理请求

惰性求值:使用变量的模块,只有在请求接收到的时候,并且到了11个http阶段/过滤模块读取这个变量的时候.
才会去求值

变量值在请求处理中是时刻变化的
有些不会变化,http的header,方法名,有些变化的limit_rate.读取变量值的那一刻,并不代表请求处理前的值

存放变脸的哈希表
Syntax: variables_hash_bucket_size size;
Default: variables_hash_bucket_size 64
Context: http

Syntax: variables_hash_max_size size;
Default variables_hash_max_size 1024;
Context: http

stream模块与http模块使用变量方式相同

73.HTTP框架提供的请求相关的变量
----------------------------------------------------------

(1)http框架提供的变量不需要编译引入新的http模块,框架变量可以反映处理请求的细节
(2)73_var.conf
有些变量在return阶段没有发生变化
curl -H 'Content-Length: 0' - H'Cookie: a=c1' 'localhost:8094?a=1&=22'

HTTP框架提供的变量
01)http请求相关的变量
02)TCP连接相关的变量
03)Nginx处理请求过程中产生的变量
04)发送HTTP响应时相关的变量
05)Nginx系统变量


74.HTTP框架提供的其他变量
---------------------------------------------

75.使用变量防盗链的referer模块
----------------------------------------------

场景:当网站通过url引用了你的页面,当用户在浏览器上点击url时,http请求的头部中会通过referer头部,
将该网站当前页面的URL带上,告诉服务器本次请求是由这个页面发起的
目的:拒绝非正常的网站访问我们站点的资源
思路:通过referer模块,用invalid_referer变量根据配置判断referer头部是否合法
referer模块:默认编译进Nginx,通过--without-http_referer_module禁用

Syntax:    valid_referers none | blocked | server_names | string ...;
Default:    —
Context:    server, location

valid_referers指令:可同时携带多个参数,表示多个referer头部都生效
参数值:
(1)none:允许缺失referer头部的请求访问
(2)block:允许referer头部没有对应的值的请求访问(经过反向代理/防火墙,没有做好配置或者处理)
(3)server_names:若referer中站点域名与server_name中本机域名某个匹配,则允许该请求访问
(4)表示域名及URL的字符串,对域名可在前缀或者后缀中含有*通配符
(5)若referer头部的值匹配字符串后,则允许访问
(6)正则表达式:若referer头部的值匹配正则表达式后,则允许访问

Syntax:    referer_hash_bucket_size size;
Default:    
referer_hash_bucket_size 64;
Context:    server, location

Syntax:    referer_hash_max_size size;
Default:    
referer_hash_max_size 2048;
Context:    server, location

75_referer.conf

$>curl -H 'referer: http://www.taohui.org.cn/ttt; referfer.taohui.tech/
403
$>curl -H 'referfer: http://www.taohui.pub/ttt' referer.taohui.tech/
valid
$>curl -H 'referer:' referfer.taohui.tech/
valid
$>curl referfer.taohui.tech/
valid
$>curl -H 'referfer: http://www.taohui.tech' referfer.taohui.tech/
403
$>curl -H 'referfer: http://referer/taohui.tech' referer.taohui.tech/
valid
$>curl -H 'referer: http://image.baidu.com/search/detail' referer.taohui.tech/
403
$>curl -H 'referer: http://image.google.com/search/detail' referer.taohui.tech/
valid

referer防盗链是简易的,攻击者很容易修改头部,对于觉到多数盗链都是有效的

76.使用变量实现防盗链功能实践：secure_link模块
